package com.cmcc.anal.framework.service;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;

import com.cmcc.anal.common.persistence.generic.impl.GenericDAOImpl;
import com.cmcc.anal.common.util.WebUtils;
import com.cmcc.anal.common.vo.JsonRequestVo;
import com.cmcc.anal.common.vo.JsonResponseVo;
import com.cmcc.anal.framework.model.CaseStatistics;
import com.cmcc.anal.framework.model.Pilot;

/**
 * 试点污染物分析  service层实现 
 * @author w
 *
 */
@Component
@Transactional
public class PollutantService extends GenericDAOImpl {

	private static Logger logger = LoggerFactory
			.getLogger(CaseInfoService.class);
	
	/**
	 * other 请求
	 * 
	 * @param jsonRequestVo
	 * @param jsonResponseVo
	 * @param request
	 * @param response
	 * @param modelMap
	 * @throws Exception
	 */
	public void report(JsonRequestVo jsonRequestVo,
			JsonResponseVo jsonResponseVo, HttpServletRequest request,
			HttpServletResponse response, ModelMap modelMap) throws Exception {
		try {
			String callback = request.getParameter("callback");
			String op = jsonRequestVo.getOp();
			String msg = null;

			// 获取综合分析的列表信息
			if ("Pollutant.PieChart".equalsIgnoreCase(op)) {

				// Map map = new HashMap();
				Object o = jsonRequestVo.getData();
				JSONObject obj = JSONObject.fromObject(o);
				int year = obj.getInt("years");
				// 查询出所有的信息上报信息
				List<CaseStatistics> csl = this.findCaseStatisticsByYear(year);
				// map.put("csList", csl);
				List<Map> mapList = doCleanUpList(csl);
				long allStatTotle = doAllStatTotle(csl); // 上报总数

				doPieChart(mapList, allStatTotle);

				WebUtils.outputJsonResponseVo(response, op, 0, "OK", mapList,
						callback);
			}

		} catch (Exception e) {
			logger.error(e.getMessage(), e);
		}

	}
	
	/**
	 * 根据年份，返回存在污染物的访年份下的试点
	 * 1.查询 t_jg_datastorage 表，返回 pilotcode 试点id code集合
	 * 2.根据 id 集合，查询  	pilot_db 详细数据
	 * 
	 * 
	 * 
	 * @param year
	 * @return
	 */
	private List<Pilot> findPilotByYear(int year){
		List<Pilot> pList = null;
		String jqSQL = "SELECT pilotcode from t_jg_datastorage where SURVEYYEAR = '" + year + "'";
		List<Object[]> jqList = this.getHibernate_Anal().createSQLQuery(jqSQL);
		if(jqList == null || jqList.size() == 0){
			return new ArrayList<Pilot>();
		}
		
		
	}
	

}
